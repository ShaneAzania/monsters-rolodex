{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-bar/search-bar.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","Cardlist","monsters","map","SearchBar","handleChange","placeholder","type","onChange","App","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAGaA,EAAO,SAACC,GACpB,OACC,sBAAKC,UAAU,iBAAf,UACC,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCJRC,EAAW,SAACR,GACxB,OACC,qBAAKC,UAAU,YAAf,SACED,EAAMS,SAASC,KAAI,SAACN,GAAD,OACnB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCLVM,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,YACzC,OAAO,uBAAOZ,UAAU,aAAaa,KAAK,SAASD,YAAaA,EAAaE,SAAUH,MCyCzEI,E,kDArCd,aAAe,IAAD,8BACb,gBAiBDJ,aAAe,SAACK,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAhB1C,EAAKC,MAAQ,CACZb,SAAU,GACVU,YAAa,IALD,E,qDAWd,WAAqB,IAAD,OAEnBI,MAAM,8CACJC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAET,SAAUkB,S,oBAO7C,WAGC,MAAkCC,KAAKN,MAA/Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YACZU,EAAmBpB,EAASqB,QAAO,SAAC1B,GAAD,OAAaA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBACtG,OACC,sBAAK9B,UAAU,MAAf,UACC,kDACA,cAAC,EAAD,CAAWY,YAAY,iBAAiBD,aAAcgB,KAAKhB,eAC3D,cAAC,EAAD,CAAUX,UAAU,YAAYQ,SAAUoB,W,GAlC5BI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5052067a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => {\r\n\treturn (\r\n\t\t<div className='card-container'>\r\n\t\t\t<img alt='monster' src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n\t\t\t<h2>{props.monster.name}</h2>\r\n\t\t\t<p>{props.monster.email}</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from '../card/card.component';\r\n\r\nexport const Cardlist = (props) => {\r\n\treturn (\r\n\t\t<div className='card-list'>\r\n\t\t\t{props.monsters.map((monster) => (\r\n\t\t\t\t<Card key={monster.id} monster={monster}></Card>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport './search-bar.styles.css';\r\n\r\nexport const SearchBar = ({ handleChange, placeholder }) => {\r\n\treturn <input className='search-bar' type='search' placeholder={placeholder} onChange={handleChange} />;\r\n};\r\n","import React, { Component } from 'react'; //Gives accesses to classes. Classes give access to State\nimport './App.css';\nimport { Cardlist } from './components/card-list/card-list.component';\nimport { SearchBar } from './components/search-bar/search-bar.component';\n\nclass App extends Component {\n\t//extend Component for Classes and other React tools\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.state = {\n\t\t\tmonsters: [],\n\t\t\tsearchField: '',\n\t\t};\n\n\t\t//this.handleChange = this.handleChange.bind(this); or arrow function method\n\t}\n\n\tcomponentDidMount() {\n\t\t//this retreaves and turns the API data into JSON format using promises\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then((response) => response.json())\n\t\t\t.then((users) => this.setState({ monsters: users }));\n\t}\n\n\thandleChange = (event) => {\n\t\tthis.setState({ searchField: event.target.value });\n\t};\n\n\trender() {\n\t\t//render is needed for react classes to work\n\n\t\tconst { monsters, searchField } = this.state;\n\t\tconst filteredMonsters = monsters.filter((monster) => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<h1>Monsters Rolodex</h1>\n\t\t\t\t<SearchBar placeholder='Search by name' handleChange={this.handleChange} />\n\t\t\t\t<Cardlist className='.cardlist' monsters={filteredMonsters}></Cardlist>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}